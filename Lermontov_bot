from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler

import logging

TOKEN = 'BOT_TOKEN'
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

# Текст стихотворений
# Парус
poem1 = """
Белеет парус одинокой
В тумане моря голубом!..
Что ищет он в стране далекой?
Что кинул он в краю родном?..
Играют волны — ветер свищет,
И мачта гнется и скрыпит…
Увы! Он счастия не ищет
И не от счастия бежит!
Под ним струя светлей лазури,
Над ним луч солнца золотой…
А он, мятежный, просит бури,
Как будто в бурях есть покой!
""".strip().split("\n")

# Бородино
poem2 = """
— Скажи-ка, дядя, ведь не даром
Москва, спаленная пожаром,
Французу отдана?
Ведь были ж схватки боевые,
Да, говорят, еще какие!
Недаром помнит вся Россия
Про день Бородина!
— Да, были люди в наше время,
Не то, что нынешнее племя:
Богатыри — не вы!
Плохая им досталась доля:
Немногие вернулись с поля…
Не будь на то господня воля,
Не отдали б Москвы!
Мы долго молча отступали,
Досадно было, боя ждали,
Ворчали старики:
«Что ж мы? на зимние квартиры?
Не смеют, что ли, командиры
Чужие изорвать мундиры
О русские штыки?»
И вот нашли большое поле:
Есть разгуляться где на воле!
Построили редут.
У наших ушки на макушке!
Чуть утро осветило пушки
И леса синие верхушки —
Французы тут как тут.
""".strip().split("\n")

# Смерть поэта
poem3 = """
Отмщенье, государь, отмщенье!
Паду к ногам твоим:
Будь справедлив и накажи убийцу,
Чтоб казнь его в позднейшие века
Твой правый суд потомству возвестила,
Чтоб видели злодеи в ней пример.
Погиб поэт! — невольник чести —
Пал, оклеветанный молвой,
С свинцом в груди и жаждой мести,
Поникнув гордой головой!..
Не вынесла душа поэта
Позора мелочных обид,
Восстал он против мнений света
Один, как прежде… и убит!
Убит!.. К чему теперь рыданья,
Пустых похвал ненужный хор
И жалкий лепет оправданья?
Судьбы свершился приговор!
Не вы ль сперва так злобно гнали
Его свободный, смелый дар
И для потехи раздували
Чуть затаившийся пожар?
Что ж? веселитесь… Он мучений
Последних вынести не мог:
Угас, как светоч, дивный гений,
Увял торжественный венок.
""".strip().split("\n")

# Тучи
poem4 = """
Тучки небесные, вечные странники!
Степью лазурною, цепью жемчужною
Мчитесь вы, будто как я же, изгнанники
С милого севера в сторону южную.
Кто же вас гонит: судьбы ли решение?
Зависть ли тайная? злоба ль открытая?
Или на вас тяготит преступление?
Или друзей клевета ядовитая?
Нет, вам наскучили нивы бесплодные…
Чужды вам страсти и чужды страдания;
Вечно холодные, вечно свободные,
Нет у вас родины, нет вам изгнания.
""".strip().split("\n")

# Родина
poem5 = """
Люблю отчизну я, но странною любовью!
Не победит ее рассудок мой.
Ни слава, купленная кровью,
Ни полный гордого доверия покой,
Ни темной старины заветные преданья
Не шевелят во мне отрадного мечтанья.
Но я люблю — за что, не знаю сам —
Ее степей холодное молчанье,
Ее лесов безбрежных колыханье,
Разливы рек ее, подобные морям;
Проселочным путем люблю скакать в телеге
И, взором медленным пронзая ночи тень,
Встречать по сторонам, вздыхая о ночлеге,
Дрожащие огни печальных деревень;
Люблю дымок спаленной жнивы,
В степи ночующий обоз
И на холме средь желтой нивы
Чету белеющих берез.
С отрадой, многим незнакомой,
Я вижу полное гумно,
Избу, покрытую соломой,
С резными ставнями окно;
И в праздник, вечером росистым,
Смотреть до полночи готов
На пляску с топаньем и свистом
Под говор пьяных мужичков.
""".strip().split("\n")

# Утес
poem6 = """
Ночевала тучка золотая
На груди утеса-великана;
Утром в путь она умчалась рано,
По лазури весело играя;

Но остался влажный след в морщине
Старого утеса. Одиноко
Он стоит, задумался глубоко,
И тихонько плачет он в пустыне.
""".strip().split("\n")

# Кавказ
poem7 = """
Хотя я судьбой на заре моих дней,
О южные горы, отторгнут от вас,
Чтоб вечно их помнить, там надо быть раз:
Как сладкую песню отчизны моей,
Люблю я Кавказ.
В младенческих летах я мать потерял.
Но мнилось, что в розовый вечера час
Та степь повторяла мне памятный глас.
За это люблю я вершины тех скал,
Люблю я Кавказ.
Я счастлив был с вами, ущелия гор,
Пять лет пронеслось: всё тоскую по вас.
Там видел я пару божественных глаз;
И сердце лепечет, воспомня тот взор:
Люблю я Кавказ!..
""".strip().split("\n")

# Беглец
poem8 = """
Гарун бежал быстрее лани,
Быстрей, чем заяц от орла;
Бежал он в страхе с поля брани,
Где кровь черкесская текла;
Отец и два родные брата
За честь и вольность там легли,
И под пятой у супостата
Лежат их головы в пыли.
Их кровь течет и просит мщенья,
Гарун забыл свой долг и стыд;

Он растерял в пылу сраженья
Винтовку, шашку — и бежит! —

И скрылся день; клубясь, туманы
Одели темные поляны
Широкой белой пеленой;
Пахнуло холодом с востока,
И над пустынею пророка
Встал тихо месяц золотой…
""".strip().split("\n")

# Мцыри
poem9 = """
Немного лет тому назад,
Там, где, сливаяся, шумят,
Обнявшись, будто две сестры,
Струи Арагвы и Куры,
Был монастырь. Из-за горы
И нынче видит пешеход
Столбы обрушенных ворот,
И башни, и церковный свод;
Но не курится уж под ним
Кадильниц благовонный дым,
Не слышно пенье в поздний час
Молящих иноков за нас.
Теперь один старик седой,
Развалин страж полуживой,
Людьми и смертию забыт,
Сметает пыль с могильных плит,
Которых надпись говорит
О славе прошлой — и о том,
Как, удручен своим венцом,
Такой-то царь, в такой-то год,
Вручал России свой народ.
""".strip().split("\n")

LAST_READ = "last_read"

WAIT_FOR_NEXT_STRING, WAIT_REPEAT_ALL, ENABLE_SUPHLER = 1, 2, 3

# Создаем клавиатуру
reply_keyboard = [['/a1poem'],
                  ['/a2poem'],
                  ['/a3poem'],
                  ['/a4poem'],
                  ['/a5poem'],
                  ['/a6poem'],
                  ['/a7poem'],
                  ['/a8poem'],
                  ['/a9poem']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)

def start(update, context):
    update.message.reply_text("Привет! Я бот, созданный любителем стихотворений Лермонтова.")
    update.message.reply_text("Выберите стихотворение")
    update.message.reply_text("""/a1poem: Парус, /a2poem: Бородино
                                 /a3poem: Смерть поэта, /a4poem: Тучи
                                 /a5poem: Родина, /a6poem: Утес
                                 /a7poem: Кавказ, /a8poem: Беглец
                                 /a9poem: Мцыри""", reply_markup=markup)
    update.message.reply_text(poem[0])
    context.user_data[LAST_READ] = 0
    return WAIT_FOR_NEXT_STRING


# Передаем данные о стихотворении, которое будем читать
# Парус
def a1poem:
        user_data[READING_POEM] = poem1


# Бородино
def a2poem:
        user_data[READING_POEM] = poem2


# Смерть поэта
def a3poem:
        user_data[READING_POEM] = poem3


# Тучи
def a4poem:
        user_data[READING_POEM] = poem4


# Родина
def a5poem:
        user_data[READING_POEM] = poem5


# Утес
def a6poem:
        user_data[READING_POEM] = poem6


# Кавказ
def a7poem:
        user_data[READING_POEM] = poem7


# Беглец
def a8poem:
        user_data[READING_POEM] = poem8


# Мцыри
def a9poem:
        user_data[READING_POEM] = poem9


def continue_or_repeat(update, user_data, next_string_index):
    poem = user_data[READING_POEM]
    # Есть, что прочитать дальше.
    if next_string_index + 1 < len(poem):
        next_string_index += 1
        update.message.reply_text(poem[next_string_index])
        user_data[LAST_READ] = next_string_index

    # Есть, что ждать дальше.
    if next_string_index + 1 < len(poem):
        return WAIT_FOR_NEXT_STRING

    # Закончили.
    else:
        update.message.reply_text("Стихотворение закончилось. Хотите еще раз? (/yes /no)")
        return WAIT_REPEAT_ALL


# Преобразование строки
def normalize(string):
    return string.lower().replace(".", "").replace(",", "").replace("-", "").replace("?", "").replace("!", "").replace(
        ":", "")


def get_next_string(update, context):
    poem = user_data[READING_POEM]
    next_string_index = context.user_data[LAST_READ] + 1
    if normalize(poem[next_string_index]) == normalize(update.message.text):  # Правильная строчка.
        return continue_or_repeat(update, context.user_data, next_string_index)
    else:  # Неправильная строчка.
        update.message.reply_text("Нет, не так. Попробуйте еще раз или позовите суфлера (/suphler).")
        return ENABLE_SUPHLER


# Суфлер
def suphler(update, context):
    poem = user_data[READING_POEM]
    next_string_index = context.user_data[LAST_READ] + 1
    update.message.reply_text(poem[next_string_index])
    return continue_or_repeat(update, context.user_data, next_string_index)


# Окончание
def stop(update, context):
    update.message.reply_text("До новых встреч!")
    context.user_data[LAST_READ] = 0
    return ConversationHandler.END


def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    museum_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],

        states={
            WAIT_FOR_NEXT_STRING: [
                MessageHandler(Filters.text & ~Filters.command, get_next_string, pass_user_data=True)
            ],
            ENABLE_SUPHLER: [
                MessageHandler(Filters.text & ~Filters.command, get_next_string, pass_user_data=True),
                CommandHandler('suphler', suphler, pass_user_data=True)
            ],
            WAIT_REPEAT_ALL: [
                CommandHandler('yes', start, pass_user_data=True),
                CommandHandler('no', stop, pass_user_data=True)
            ]
        },
        fallbacks=[CommandHandler('stop', stop, pass_user_data=True)]
    )

    dp.add_handler(museum_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
